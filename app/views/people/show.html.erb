<!DOCTYPE html>
<meta charset="utf-8">
<p id="notice"><%= notice %></p>

<div class="row">
	<%= image_tag @person.photo.url(:small), id: 'photo', class: 'span3' %>
	<div class="span9">
		<h3 id='full_name'> <%= @person.full_name %> </h3>

		<p>
		  <strong>Gender:</strong>
		  <%= @person.gender %>
		</p>
		<p>Birth date: <%= @person.birth.date %></p>
    <p>Dead: <%= @person.death.dead.yesno %></p>
    <% if @person.alive? %>
      <p>Age: <%= @person.age %></p>
    <% else %>
      <p>Age at death: <%= @person.age('death_date') %></p>
      <p>Death date: <%= @person.death.date %></p>
      <p>Cause of Death: <%= @person.death.cause %></p>
    <% end %>

		<%= link_to 'Edit', edit_person_path(@person) %> |
		<%= link_to 'Back', people_path %>
	</div>
</div>

<ul class="nav nav-tabs">
  <li class="active"><a href="#events-tab" data-toggle="tab">Events</a></li>
  <li><a href="#family-tab" data-toggle="tab">Family</a></li>
  <li><a href="#tree-tab" data-toggle="tab">Tree</a></li>
  <li><a href="#map-tab" data-toggle="tab">Map</a></li>
</ul>

<div id="tabs" class="tab-content">
  <div id="events-tab" class="tab-pane active"> <!--id="facts-box" -->
  	<% if @eventsFormat == 'data-list' %>
  		<dl class="dl-horizontal">
  			<dt>Event Name</dt>
  			<dd>Event details</dd>
  		</dl>
  	<% elsif @eventsFormat == 'timeline' %>
  		<table>
  			<tr>
  				<td class="span3">Event Name</td>
  				<td class="span1"><i class='icon-glass'></i></td>
  				<td class="span8">Event Details</td>
  			</tr>
  		</table>
  	<% end %>
  </div>

  <div id="family-tab" class="tab-pane">
    <dl class="dl-horizontal">
      <dt>Mother</dt>
      <dd>
        <% if @person.mother %>
          <p><%= link_to @person.mother.full_name, @person.mother%></p>
        <% else %>
          <p><%= link_to edit_person_path, :class => 'btn btn-primary' do %>Add Mother <i class="icon-plus icon-white"></i><%end%></p>
        <% end %>
      </dd>
      <dt>Father</dt>
      <dd>
        <% if @person.father %>
          <p><%= link_to @person.father.full_name, @person.father%></p>
        <% else %>
          <p><%= link_to edit_person_path, :class => 'btn btn-primary' do %>Add Father <i class="icon-plus icon-white"></i><%end%></p>
        <% end %>
      </dd>
      <% @children.each do |child| %>
        <dt>Child</dt>
        <dd>
        <%= link_to child.full_name, child %><br>
        </dd>
      <% end %>
    </dl>
  </div>

  <div id="tree-tab" class="tab-pane">
    <div id="tree-container"></div>

    <style>

      .node {
        cursor: pointer;
      }

      .node circle {
        fill: #fff;
        stroke: steelblue;
        stroke-width: 1.5px;
      }

      .node text {
        font: 10px sans-serif;
      }

      .link {
        fill: none;
        stroke: #ccc;
        stroke-width: 1.5px;
      }

    </style>
    <script src="http://d3js.org/d3.v3.min.js"></script>
    <script>
      var margin = {top: 20, right: 120, bottom: 20, left: 120},
          width = 960 - margin.right - margin.left,
          height = 800 - margin.top - margin.bottom;
          
      var i = 0,
          duration = 750,
          root;
      var tree = d3.layout.tree()
          .size([height, width]);

      var diagonal = d3.svg.diagonal()
          .projection(function(d) { return [d.y, d.x]; });

      var svg = d3.select("#tree-container").append("svg")
          .attr("width", width + margin.right + margin.left)
          .attr("height", height + margin.top + margin.bottom)
        .append("g")
          .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        var data ='<%= @json_tree.to_s.html_safe %>';//'{"name": "person1", "children": [{"name": "person2"}]}';
        var root = JSON.parse(data);
        root.x0 = height / 2;
        root.y0 = 0;

        function collapse(d) {
          if (d.children) {
            d._children = d.children;
            d._children.forEach(collapse);
            d.children = null;
          }
        }

        root.children.forEach(collapse);
        update(root);

      d3.select(self.frameElement).style("height", "800px");

      function update(source) {

        // Compute the new tree layout.
        var nodes = tree.nodes(root).reverse(),
            links = tree.links(nodes);

        // Normalize for fixed-depth.
        nodes.forEach(function(d) { d.y = d.depth * 180; });

        // Update the nodes…
        var node = svg.selectAll("g.node")
            .data(nodes, function(d) { return d.id || (d.id = ++i); });

        // Enter any new nodes at the parent's previous position.
        var nodeEnter = node.enter().append("g")
            .attr("class", "node")
            .attr("transform", function(d) { return "translate(" + source.y0 + "," + source.x0 + ")"; })
            .on("click", click);

        nodeEnter.append("circle")
            .attr("r", 1e-6)
            .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });

        nodeEnter.append("text")
            .attr("x", function(d) { return d.children || d._children ? -10 : 10; })
            .attr("dy", ".35em")
            .attr("text-anchor", function(d) { return d.children || d._children ? "end" : "start"; })
            .text(function(d) { return d.name; })
            .style("fill-opacity", 1e-6);

        // Transition nodes to their new position.
        var nodeUpdate = node.transition()
            .duration(duration)
            .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; });

        nodeUpdate.select("circle")
            .attr("r", 4.5)
            .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });

        nodeUpdate.select("text")
            .style("fill-opacity", 1);

        // Transition exiting nodes to the parent's new position.
        var nodeExit = node.exit().transition()
            .duration(duration)
            .attr("transform", function(d) { return "translate(" + source.y + "," + source.x + ")"; })
            .remove();

        nodeExit.select("circle")
            .attr("r", 1e-6);

        nodeExit.select("text")
            .style("fill-opacity", 1e-6);

        // Update the links…
        var link = svg.selectAll("path.link")
            .data(links, function(d) { return d.target.id; });

        // Enter any new links at the parent's previous position.
        link.enter().insert("path", "g")
            .attr("class", "link")
            .attr("d", function(d) {
              var o = {x: source.x0, y: source.y0};
              return diagonal({source: o, target: o});
            });

        // Transition links to their new position.
        link.transition()
            .duration(duration)
            .attr("d", diagonal);

        // Transition exiting nodes to the parent's new position.
        link.exit().transition()
            .duration(duration)
            .attr("d", function(d) {
              var o = {x: source.x, y: source.y};
              return diagonal({source: o, target: o});
            })
            .remove();

        // Stash the old positions for transition.
        nodes.forEach(function(d) {
          d.x0 = d.x;
          d.y0 = d.y;
        });
      }

      // Toggle children on click.
      function click(d) {
        if (d.children) {
          d._children = d.children;
          d.children = null;
        } else {
          d.children = d._children;
          d._children = null;
        }
        update(d);
      }

    </script>
  </div>

  <div id="map-tab" class="tab-pane">
    
  </div>
</div>
<style>
    #map {
      width: 500px;
      height: 500px;
    }
    </style>
    lat: <%= @person.birth.place.lat %><br/>
    lon: <%= @person.birth.place.lon %><br/>


    <div id='map'></div>

    <%= 
      map(:center => {
          :latlng => [@person.birth.place.lat, @person.birth.place.lon],
          :zoom => 0
      },
      :markers => [
        {
          :latlng => [@person.birth.place.lat, @person.birth.place.lon]
        }
      ]) 
    %>

